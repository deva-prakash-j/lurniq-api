name: Build and Deploy Native To GCP

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  native-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: üßæ Checkout Code
        uses: actions/checkout@v4

      - name: ‚òï Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: üîß Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17'
          distribution: 'graalvm-community'

      - name: üèóÔ∏è Set up Gradle
        uses: gradle/gradle-build-action@v3

      - name: üì¶ Native Compile
        run: ./gradlew nativeCompile

      - name: üìã List native build output
        run: ls -la build/native/nativeCompile/

      - name: üîê Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Configure Docker to use Google Artifact Registry
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: üì§ Build and Push Native Docker Image
        run: |
          IMAGE_NAME=${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/lurniq/lurniq-api:latest
          docker build -f Dockerfile.native -t $IMAGE_NAME --platform linux/amd64 .
          docker push $IMAGE_NAME

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: lurniq-api
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          region: ${{ secrets.GCP_REGION }}
          image: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/lurniq/lurniq-api:latest
          env_vars: |
            SPRING_PROFILES_ACTIVE=prod
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_URI=${{ secrets.DB_URI }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            DDL_AUTO=${{ secrets.DDL_AUTO }}
            EMAIL_FROM=${{ secrets.EMAIL_FROM }}
            MAIL_HOST=${{ secrets.MAIL_HOST }}
            MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
            MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            BASE_URL=${{ secrets.BASE_URL }}
            FRONTEND_BASE_URL=${{ secrets.FRONTEND_BASE_URL }}
          flags: --min-instances=0 --max-instances=1 --allow-unauthenticated --memory=1Gi --cpu-throttling --timeout=300 --startup-cpu-boost --platform=managed
      - name: Show service URL
        run: 'echo "Service URL: ${{ steps.deploy.outputs.url }}"'