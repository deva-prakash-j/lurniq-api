name: Build and Deploy Native To GCP

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17 (or your Spring Boot Java version)
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '17'
        distribution: 'graalvm'
        cache: 'gradle'

    - name: Configure Gradle daemon
      run: |
        mkdir -p ~/.gradle
        echo "org.gradle.daemon=true" >> ~/.gradle/gradle.properties
        echo "org.gradle.parallel=true" >> ~/.gradle/gradle.properties
        echo "org.gradle.configureondemand=true" >> ~/.gradle/gradle.properties
        echo "org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError" >> ~/.gradle/gradle.properties

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run tests with test profile
      run: ./gradlew test
      env:
        SPRING_PROFILES_ACTIVE: test

    - name: Clean build and compile native executable
      run: ./gradlew clean build nativeCompile -x test --no-build-cache --refresh-dependencies --parallel
      env:
        GRADLE_OPTS: "-Xmx4g -XX:MaxMetaspaceSize=1g"
    
    - name: Verify native-image tool
      run: |
        ${{ env.JAVA_HOME }}/bin/native-image --version
        # This should output something like 'GraalVM Native Image ...'

    - name: Verify native executable exists and its name
      run: |
        echo "Contents of build/native/nativeCompile/:"
        ls -la build/native/nativeCompile/
        # This output is crucial! Copy the exact filename you see here.
        echo "Executable details:"
        file build/native/nativeCompile/*

    - name: Create Dockerfile for native image
      run: |
        cat > Dockerfile.native << 'EOF'
        FROM gcr.io/distroless/base-debian12:latest
        COPY build/native/nativeCompile/lurniq-api /app/
        EXPOSE 8080
        USER nonroot:nonroot
        ENTRYPOINT ["/app/lurniq-api"]
        EOF

    - name: Authenticate to Google Cloud
      id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Configure Docker to use Google Artifact Registry
      run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

    - name: Build and push native Docker image
      run: |
        IMAGE_NAME="${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/lurniq/${{ secrets.SERVICE_NAME }}:latest"
        docker build -f Dockerfile.native -t $IMAGE_NAME .
        docker push $IMAGE_NAME