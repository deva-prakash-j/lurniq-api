plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id("com.google.cloud.tools.jib") version "3.4.5"
}

group = 'com.lurniq'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.0'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
	// Performance optimization dependencies
	implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	// Spring Context Indexer for faster startup
	annotationProcessor 'org.springframework:spring-context-indexer'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Optimize JAR for production
jar {
	enabled = false
	archiveClassifier = ''
}

// Production optimizations
bootJar {
	archiveFileName = 'lurniq-api.jar'
	launchScript()
}

tasks.named('test') {
	useJUnitPlatform()
}

// Spring Context Indexer configuration for faster startup
compileJava {
	// The Spring Context Indexer works automatically when added as annotationProcessor
	// No special configuration needed - it scans for @Component, @Service, @Repository, etc.
	
	// Ensure proper annotation processing
	options.compilerArgs += [
		'-parameters'  // Enable parameter names for better Spring functionality
	]
	
	// Generate component index for faster startup
	doFirst {
		println "Generating Spring component index for faster startup..."
	}
	
	doLast {
		def indexFile = file("${buildDir}/classes/java/main/META-INF/spring.components")
		if (indexFile.exists()) {
			println "‚úÖ Spring component index generated: ${indexFile.absolutePath}"
			println "üìä Component index size: ${indexFile.length()} bytes"
			def lines = indexFile.readLines()
			println "üìã Components indexed: ${lines.size()}"
		} else {
			println "‚ö†Ô∏è  Spring component index will be generated automatically by the annotation processor"
		}
	}
}

jib {
    from {
        image = "eclipse-temurin:17-jdk-alpine"
    }
    to {
        image = System.getProperty("jib.to.image", "lurniq/lurniq-api:latest")
    }
    container {
        jvmFlags = [
            "-Dspring.profiles.active=prod",
            "-Xmx768m",  // Increased for 1GB container
            "-Xms256m",  // Increased initial heap
            "-XX:+UseG1GC",
            "-XX:+UseStringDeduplication",
            "-XX:+OptimizeStringConcat",
            "-XX:+UseCompressedOops",
			"-XX:+UseContainerSupport",
            "-XX:+UseCompressedClassPointers",
            "-XX:G1HeapRegionSize=8m",
            "-XX:MaxGCPauseMillis=200",
            "-XX:MaxRAMPercentage=75.0",
            "-XX:+TieredCompilation",
            "-XX:TieredStopAtLevel=1",  // Faster startup compilation
            "-Xverify:none",  // Skip bytecode verification for faster startup
            "-XX:+AlwaysPreTouch"  // Touch memory pages at startup
        ]
        ports = ["8080"]
        user = "1000:1000"
        environment = [
            "SPRING_PROFILES_ACTIVE": "prod"
        ]
    }
}
